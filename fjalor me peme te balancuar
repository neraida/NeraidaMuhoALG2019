/*
Te shkruhet nje program qe lexon nje skedar text me madhesi te konsiderueshme dhe shfaq vetem njehere te gjitha
fjalet e vecante qe shfaqen ne te. Gjate leximit te skedarit, programi duhet te krijoje nje fjalor me te gjitha fjalet qe
jane shfaqur ne skedar. Sa here qe shfaqet nje fjale e re, dmth qe nuk ndodhet ne fjalor, programi duhet ta shtoje ate
ne fjalor.

ME PEME TE BALANCUAR:

KOMPLEKSITETI: O(log n)

1. 100 fjale:
2. 1000 fjale:
3. 100000 fjale:
4. 1000000 fjale:
*/

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

//deklarimi
typedef struct peme{
	string fjala;
	struct peme* djathtas;
	struct peme* majtas;
    int lartesia;
};

//kontrolloj nqs fjala gjendet me pare ne peme me rekursion
bool alreadyExist(peme*rrenje, string s){
	if(rrenje==NULL)return false;
	if(rrenje->fjala==s)return true;
	
	bool a=alreadyExist(rrenje->majtas,s);
	if(a)return true;
	
	bool b=alreadyExist(rrenje->djathtas,s);
	return b;
}

//funksion qe kthen lartesine e elementit ne peme
int lartesia(peme* p){  
    if (p==NULL)return 0;
    return p->lartesia;
}  


//funksion ndihmes per te gjetur maksimumin
int max(int a, int b){  
    return (a > b)? a : b;  
}  


//rrotullimi djathtas
peme* rrotulloDjathtas(peme *y){  
    peme* x = y->majtas;  
    peme* T2 = x->djathtas;  
    
    x->djathtas = y;  
    y->majtas = T2;  
  
    //rifreskoj lartesite (maksimalja nder lartesine e majte dhe te djathte)
    y->lartesia = max(lartesia(y->majtas), 
                    lartesia(y->djathtas)) + 1;  
    x->lartesia = max(lartesia(x->majtas), 
                    lartesia(x->djathtas)) + 1;  
  
    //kthej rrenjen
    return x;  
}  
  
//rrotullimi majtas
peme* rrotulloMajtas(peme* x){  
    peme* y = x->djathtas;  
    peme* T2 = y->majtas;  
    
    y->majtas = x;  
    x->djathtas = T2;  
  
    //rifreskoj lartesite (maksimalja nder lartesine e majte dhe te djathte)
    x->lartesia = max(lartesia(x->majtas),     
                    lartesia(x->djathtas)) + 1;  
    y->lartesia = max(lartesia(y->majtas),  
                    lartesia(y->djathtas)) + 1;  
  
    //kthej rrenjen 
    return y;  
}  
  
//diferenca e lartesise se majte dhe te djathte te elementit
int getBalance(peme* p){  
    if (p == NULL)return 0;  
    return lartesia(p->majtas) - lartesia(p->djathtas);  
}  
  
//shtojme el. e ri ne peme
peme* shto(peme* rrenje, string s){ 

//deklaroj elementin e ri
    peme*p = new peme; 
    p->fjala = s;
    p->majtas = NULL;  
    p->djathtas = NULL;  
    p->lartesia = 1; //lartesia = 1 ne fillim si gjethe
    
    //nqs ska element tjeter kthejme elementin e ri si rrenje te pemes
    if (rrenje == NULL)return p;  
  
    if (s < rrenje->fjala){ //caktojme ne cilen ane te pemes duhet te jete elementi
        rrenje->majtas = shto(rrenje->majtas, s); 
	}
    else{
        rrenje->djathtas = shto(rrenje->djathtas, s);  
    }
    
    rrenje->lartesia = 1 + max(lartesia(rrenje->majtas),  
                        lartesia(rrenje->djathtas));  
  
    //kontrolloj nqs rrenja eshte e balancuar. nqs jo shoh 4 rastet e mundshme te balancimit te pemes
    int balance = getBalance(rrenje);  
  
    //rasti majtas-majtas
    if (balance > 1 && s < rrenje->majtas->fjala)  
        return rrotulloDjathtas(rrenje);  
  
    //rasti djathtas-djathtas
    if (balance < -1 && s > rrenje->djathtas->fjala)  
        return rrotulloMajtas(rrenje);  
  
    //rasti majtas-djathtas
    if (balance > 1 && s > rrenje->majtas->fjala){  
        rrenje->majtas = rrotulloMajtas(rrenje->majtas);  
        return rrotulloMajtas(rrenje);  
    }  
  
    //rasti djathtas-majtas
    if (balance < -1 && s < rrenje->djathtas->fjala){  
        rrenje->djathtas = rrotulloDjathtas(rrenje->djathtas);  
        return rrotulloMajtas(rrenje);  
    }  
  
    return rrenje;//kthej rrenjen
}
//heqim shenjat e pikesimit dhe bejme fjalet lowercase ne menyre qe mos te perseriten ne forma te ndryshme
string hiqPikesimin(string s){
	int len=s.size();
	for(int i=0; i<len; i++){
        s[i]= (tolower(s[i]));
        if (ispunct(s[i]))
        {
            s.erase(i--, 1);
            len = s.size();
        }
    }
    return s;
}

//funksion per te printuar pemen ne menyre nderrendore
void printo(peme*rrenje){
	if(rrenje==NULL)return;
	printo(rrenje->majtas);
	cout<<rrenje->fjala<<endl;
	printo(rrenje->djathtas);
}

int main() {
	cout<<"Programi skedar-peme binare"<<endl;
	cout<<"Jep emrin e skedarit dhe vendos .txt pas tij"<<endl;
	
	//deklaroj skedarin dhe marr emrin e skedarit input nga perdoruesi
	string fileName, fjala;
	cin>>fileName;
	ifstream input;
	input.open(fileName);
	
	//deklaroj pemen ku do ruhen fjalet e fjalorit
	peme*rrenje = new peme;
	rrenje = NULL;
	
	if(!input.is_open()){
		cout<<"Gabim ne hapjen e skedarit!"<<endl;
	}
	else{
		while(input>>fjala){//per sa kohe kemi fjale ne skedar
			fjala=hiqPikesimin(fjala); //pastrojme fjalen
			if(!alreadyExist(rrenje,fjala)){ //nqs nuk gjendej me pare ne peme
				rrenje=shto(rrenje,fjala); //e shtojme ne peme
			}
		}
	}
	//printojme pemen
	printo(rrenje);
	return 0;
}
