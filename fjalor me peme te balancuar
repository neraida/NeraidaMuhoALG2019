/*
Te shkruhet nje program qe lexon nje skedar text me madhesi te konsiderueshme dhe shfaq vetem njehere te gjitha
fjalet e vecante qe shfaqen ne te. Gjate leximit te skedarit, programi duhet te krijoje nje fjalor me te gjitha fjalet qe
jane shfaqur ne skedar. Sa here qe shfaqet nje fjale e re, dmth qe nuk ndodhet ne fjalor, programi duhet ta shtoje ate
ne fjalor.

ME PEME TE BALANCUAR:

KOMPLEKSITETI: O(log n)

1. 100 fjale: 0.0902s
2. 1000 fjale: 0.3002s
3. 100000 fjale: 2.153s
4. 1000000 fjale: 18.13s
*/
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

//deklaroj strukturen e pemes se balancuar
typedef struct pema{
	string fjala;
	struct pema* djathtas;
	struct pema* majtas;
	int lartesia;
};

//kontrolloj nqs fjala gjendet me pare ne peme me rekursion
bool ekziston(pema*rrenja, string s){
	if(rrenja==NULL)return false;
	if(rrenja->fjala==s)return true;
	
	bool a=ekziston(rrenja->majtas,s);
	if(a)return true;
	
	bool b=ekziston(rrenja->djathtas,s);
	return b;
} //1+1+1+1+log n+1+1+log n+1=2logn++6 kompleksiteti o(log n)


//funksion qe kthen lartesine e elementit ne peme
int lartesia(pema* p){  
    if (p==NULL)return 0;
    return p->lartesia;
}  //1+1+1 kompleksitei o(1)


//funksion ndihmes per te gjetur maksimumin
int max(int a, int b){  
    return (a > b)? a : b;  
}  // kompleksiteti o(1)


//rrotullimi djathtas
pema* rrotulloDjathtas(pema *y){  
    pema* x = y->majtas;  
    pema* T2 = x->djathtas;  
    
    x->djathtas = y;  
    y->majtas = T2;  
  
    //rifreskoj lartesite (maksimalja nder lartesine e majte dhe te djathte)
    y->lartesia = max(lartesia(y->majtas),lartesia(y->djathtas)) + 1;  
    x-> lartesia= max(lartesia(x->majtas),lartesia(x->djathtas)) + 1;  
  
    //kthej rrenjen
    return x;  
}  //2+2+2+2+logn+1+logn+1+1=2logn+11 kompleksiteti o(logn) 
  
//rrotullimi majtas
pema* rrotulloMajtas(pema* x){  
    pema* y = x->djathtas;  
    pema* T2 = y->majtas;  
    
    y->majtas = x;  
    x->djathtas = T2;  
  
    //rifreskoj lartesite (maksimalja nder lartesine e majte dhe te djathte)
    x->lartesia = max(lartesia(x->majtas),lartesia(x->djathtas)) + 1;  
    y->lartesia = max(lartesia(y->majtas),lartesia(y->djathtas)) + 1;  
  
    //kthej rrenjen 
    return y;  
}  //2+2+2+2+logn+1+logn+1+1=2logn+11 kompleksiteti o(logn) 
  
//funksion per te llogaritur diferencen e lartesive te anes se majte dhe te djathte te elementit
int llogarit(pema* p){  
    if (p == NULL)return 0;  
    return lartesia(p->majtas) - lartesia(p->djathtas);  
}  //1+1+2logn kompleksiteti o(logn) 
  
//funksion per te shtuar elementin e ri ne peme
pema* shto(pema* rrenja, string s){ 

//deklaroj elementin e ri
    pema*p = new pema; 
    p->fjala = s;
    p->majtas = NULL;  
    p->djathtas = NULL;  
    p->lartesia = 1; //lartesia = 1 ne fillim si gjethe
    
    //nqs ska element tjeter kthejme elementin e ri si rrenje te pemes
    if (rrenja == NULL)return p;  
  
    if (s < rrenja->fjala){ //caktojme ne cilen ane te pemes duhet te jete elementi
        rrenja->majtas = shto(rrenja->majtas, s); 
	}
    else{
        rrenja->djathtas = shto(rrenja->djathtas, s);  
    }
    
    rrenja->lartesia = 1 + max(lartesia(rrenja->majtas),lartesia(rrenja->djathtas));  
  
    //kontrolloj nqs rrenja eshte e balancuar. nqs jo shoh 4 rastet e mundshme te balancimit te pemes
    int balanca = llogarit(rrenja);  
  
    //rasti majtas-majtas
    if (balanca > 1 && s < rrenja->majtas->fjala)  
        return rrotulloDjathtas(rrenja);  
  
    //rasti djathtas-djathtas
    if (balanca < -1 && s > rrenja->djathtas->fjala)  
        return rrotulloMajtas(rrenja);  
  
    //rasti majtas-djathtas
    if (balanca > 1 && s > rrenja->majtas->fjala){  
        rrenja->majtas = rrotulloMajtas(rrenja->majtas);  
        return rrotulloDjathtas(rrenja);  
    }  
  
    //rasti djathtas-majtas
    if (balanca < -1 && s < rrenja->djathtas->fjala){  
        rrenja->djathtas = rrotulloDjathtas(rrenja->djathtas);  
        return rrotulloMajtas(rrenja);  
    }  
  
    return rrenja;//kthej rrenjen
}  //2+2+2+2+2+1+1+1+1+1+2logn+1+logn+1+2+logn+2+logn+2+logn+1+logn+2+logn+1+logn=9logn+27 komplesiteti o(logn) 
  
//heqim shenjat e pikesimit dhe bejme fjalet lowercase qe mos te perseriten ne forma te ndryshme
string hiqPikesimin(string s){
	int len=s.size();
	for(int i=0; i<len; i++){
        s[i]= (tolower(s[i]));
        if (ispunct(s[i]))
        {
            s.erase(i--, 1);
            len = s.size();
        }
    }
    return s;
} //2+n+(n-1)+(n-1)+1+1+1=3n+3 kompleksiteti o(n)


//funksion per te printuar pemen ne menyre nderrendore
void printo(pema*rrenja){
	if(rrenja==NULL)return;
	printo(rrenja->majtas);
	cout<<rrenja->fjala<<endl;
	printo(rrenja->djathtas);
}

int main() {
	cout<<"Programi skedar-peme e balancuar"<<endl;
	cout<<"Jep emrin e skedarit me prapashtesen .txt"<<endl;
	
	//deklaroj skedarin dhe marr emrin e skedarit input nga perdoruesi
	string emriSkedarit, fjale;
	cin>>emriSkedarit;
	ifstream input;
	input.open(emriSkedarit);
	
	//deklaroj pemen ku do ruhen fjalet e fjalorit
	pema*rrenja = new pema;
	rrenja = NULL;
	
	if(!input.is_open()){ //rasti i gabimit ne hapjen e skedarit
		cout<<"Gabim ne hapjen e skedarit!"<<endl;
	}
	else{
		while(input>>fjale){
			fjale=hiqPikesimin(fjale); //pastrojme fjalen
			if(!ekziston(rrenja,fjale)){ //nqs nuk gjendej me pare ne peme
				rrenja=shto(rrenja,fjale); //e shtojme ne peme
			}
		}
	}
	//printojme pemen
	printo(rrenja);
	return 0;
}
